#include <AccelStepper.h>
#include <Wire.h>
#include <Adafruit_MotorShield.h>
#include "utility/Adafruit_MS_PWMServoDriver.h"


int inputPin = 2;               // choose the input pin (for PIR sensor)
int pirState = LOW;             // we start, assuming no motion detected ("sensorFlag") boolean
int val = 0;                    // variable for reading the sensor 
int iCounter = 0;               // counts iterations

Adafruit_MotorShield AFMSbot(0x61); // Rightmost jumper closed
Adafruit_MotorShield AFMStop(0x60); // Default address, no jumpers

// Connect one stepper with 200 steps per revolution (1.8 degree)
// to the top shield
Adafruit_StepperMotor *myStepper1 = AFMStop.getStepper(200, 1);

// Connect two steppers with 200 steps per revolution (1.8 degree)
// to the bottom shield
Adafruit_StepperMotor *myStepper2 = AFMSbot.getStepper(200, 1);
Adafruit_StepperMotor *myStepper3 = AFMSbot.getStepper(200, 2);


//void doDance1(){
//  myStepper1->setSpeed(3000);
//  myStepper2->setSpeed(3000);
//  myStepper3->setSpeed(3000);
//
//  myStepper1->step(500, FORWARD, DOUBLE);
//  myStepper2->step(1000, FORWARD, DOUBLE);
//  myStepper3->step(500, FORWARD, DOUBLE);
//
//  }
//  
//void doDance2(){
//  myStepper1->setSpeed(3000);
//  myStepper2->setSpeed(3000);
//  myStepper3->setSpeed(3000);
//  
//  myStepper1->step(500, FORWARD, DOUBLE);
//  myStepper2->step(1000, FORWARD, DOUBLE);
//  myStepper3->step(500, FORWARD, DOUBLE);
//
//  }
//  
//void doDance3(){
//  myStepper1->setSpeed(3000);
//  myStepper2->setSpeed(3000);
//  myStepper3->setSpeed(3000);
//  
//  myStepper1->step(1000, BACKWARD, DOUBLE);
//  myStepper2->step(2000, BACKWARD, DOUBLE);
//  myStepper3->step(1000, BACKWARD, DOUBLE);
//  }


void forwardstep1() {  
  myStepper1->onestep(FORWARD, DOUBLE);
}
void backwardstep1() {  
  myStepper1->onestep(BACKWARD, DOUBLE);
}

// wrappers for the second motor!
void forwardstep2() {  
  myStepper2->onestep(FORWARD, DOUBLE);
}
void backwardstep2() {  
  myStepper2->onestep(BACKWARD, DOUBLE);
}

// wrappers for the third motor!
void forwardstep3() {  
  myStepper3->onestep(FORWARD, DOUBLE);
}
void backwardstep3() {  
  myStepper3->onestep(BACKWARD, DOUBLE);
}

// Now we'll wrap the 3 steppers in an AccelStepper object
AccelStepper stepper1(forwardstep1, backwardstep1);
AccelStepper stepper2(forwardstep2, backwardstep2);
AccelStepper stepper3(forwardstep3, backwardstep3);

void doDance1(){
  int p1 = 500; //position for stepper 1 
  int p2 = 500; //position for stepper 2
  int p3 = 500; //position for stepper 3
  int s1 = 100; //position for stepper 1
  int s2 = 100; //position for stepper 2
  int s3 = 100; //position for stepper 3
  
  stepper1.setSpeed(s1);  //since the "run()" function didn't work, I'm trying "runSpeedToPosition()"
  stepper1.moveTo(p1);
  stepper1.runSpeedToPosition();  //taken from example "ProportionalControl"
    
  stepper2.setSpeed(s2);
  stepper2.moveTo(p2);
  stepper2.runSpeedToPosition();

  stepper3.setSpeed(s3);
  stepper3.moveTo(p3);
  stepper3.runSpeedToPosition();
}

void doDance2(){
  stepper1.setSpeed(500.0);
  stepper1.moveTo(1000);
  stepper1.runSpeedToPosition();
    
  stepper2.setSpeed(200.0);
  stepper2.moveTo(1000);
  stepper2.runSpeedToPosition();
  
  stepper3.setSpeed(700.0);
  stepper3.moveTo(1000);
  stepper3.runSpeedToPosition();  
}

void doDance3(){
  stepper1.setSpeed(500.0);
  stepper1.moveTo(0);
  stepper1.runSpeedToPosition();  
      
  stepper2.setSpeed(200.0);
  stepper2.moveTo(0);
  stepper2.runSpeedToPosition();  
  
  stepper3.setSpeed(700.0);
  stepper3.moveTo(0);
  stepper3.runSpeedToPosition();  
} 

void setup() {
  Serial.begin(9600);
  AFMSbot.begin(); // Start the bottom shield
  AFMStop.begin(); // Start the top shield

  stepper1.setMaxSpeed(1000.0); 
  stepper2.setMaxSpeed(1000.0);
  stepper3.setMaxSpeed(1000.0);

  stepper1.moveTo(0);
  stepper2.moveTo(0);
  stepper3.moveTo(0);
  
}
 
void loop(){
  val = digitalRead(inputPin);  // read input value
  if (pirState == LOW && val == HIGH && iCounter == 0) {                    // check if the Sensor input is HIGH
      Serial.println("First Motion detected!"); //We only want to print on the output change, not sensor state
      pirState = HIGH;                  // Change pirState to HIGH to turn sensor numb for a while
      doDance1();
      iCounter=1;                         // in the beginning, the number of iterations is 0

  }
  else if (pirState == LOW && val == HIGH && iCounter == 1) {                    // check if the Sensor input is HIGH
      Serial.println("Second Motion detected!"); //We only want to print on the output change, not sensor state
      pirState = HIGH;
      doDance2();
      iCounter=2;

    
  }
  else if (pirState == LOW && val == HIGH && iCounter == 2) {                    // check if the Sensor input is HIGH
      Serial.println("Third Motion detected!"); //We only want to print on the output change, not sensor state
      pirState=HIGH;
      doDance3();
      iCounter = 0;


  }
  else if (val == LOW && pirState == HIGH){                                 // if Sensor input is LOW and if the sensor is numb
      Serial.println("Motion ended!");    // We only want to print on the output change, not sensor state
      pirState = LOW;                     // make state go back to the beginning, i.e. check sensor input
  }
 }
